const _ = require("lodash"); //node automatically look to package.json

/*
-core module (built in in node)==>like fs/os/http===>using this core modules for recieve functionallity
-additional packages for extra features in node that is not available in the node core 
-example of this backages : express===>kind of framework for building node website
-user made packages that we can use with node and we can install them using npm 
-npm===>node package manager 
-npm automatically installed in your computer when install node 
-npm: tool we can use to install/update/remove node packages into our computor diretely and into indevisual projects to use 
-in past ===>npm using to install front end frameworks or libraries like view and react 
- in node useing npm to install packages to build node website
- npm site (npmjs.com)


//=================================installed globally(npm i -g )=============================//
1.nodemon===>this help us with development workflow  (we do not have to keep restarting the server manually )
//nodemon--> is a backage helo create alive reload server(every time you make change in server code , you have to cancel out the current process in the terminal and then rerun the file again and this restart the server to reflect changes in browser)
//install nodemon ===> have live reload server 
//npm i -g nodemon===>install nodemon globally on your computer(not just for this project)
//also instead using node (fileName) to run /start it i can use nodemon(filename) (no need to start server manually each time make change in server code )
//nodemon server===>listen for request to server on port (#) 
*****so installing nodemon and using it to run node server, instead of cancel process in terminal and rerun server to restart the server and reflect changes on browser(restart server manually), nodemon restart server (automatically each time have changes in server code )
//=========================package-lock.json=====================================/
-npm install
-keep track of the different dependency versions that we have installed in our project(do not edit this file)
//===================package.json/npm init======================================//
-package file(package.json) ===>json file(keep track any packages we install locally to our project /and project detailes and any kind of project specific script )
-when you want to use any kind of  third-party packages in your project you have to create package-lock.json
-npm init===>create package.json===>(keep track any packages installed locally in project)===>initializes as package-lock.json
package.json
*json object {
    *project descreption (name/aut/main)
    *specific scripts(test/start)
    *dependencies: (package.json keep track all project dependencies unstalled)==>dependencies mean packages we installed locally into project(project depends on)

}


//========================installed packages locally/node-modules/lodash===============================================//
-when install any local packages in the project===>node-modules folder will create()
-npm i (dependency name)//npm i --save (dependency name)
-if you have old version of node/npm when installed dependencies using --save flag (install and save it to dependencies) but in new versions no need to explicity --save
-third-party packages ( not available in node core / installed this packages (utility libraries/frameworks) to add extra features to node project)
**packages installed locally ( into indevisual project/not globally on computer)
1.lodash(utility library)===>/npm i lodash//npm i --save lodash (save===>mean save it to our local dependencirs/register or check it in package.json )
---under score (-)is lodash library
---after install it / exported as node.js modules
---so need to require it at the top 
*/

//lodash(utility library)==>Lodash makes JavaScript easier by taking the hassle out of working with arrays, numbers, objects, strings, etc.
//generate random number

const num = Math.random() * 100;
console.log(num);

//run a function once//call function just once

const sayHello = _.once(function () {
  console.log("helllo");
});

sayHello(); //will work
sayHello(); //not working

//================================ dependencies & sharing code/npm install=============================//
/*
-another good thing about npm / package.json is we can share project code 
-note when share code (togithup/email) that node-modules folder is huge with loads of different packages and dependencies inside it and no need to upload it 
-for example upload code to githup without node-modules when you download code again or take a code from others in text-editor you will not see node-modules so when run server you will git 
error===>(can not find modules (modules you required in your project) baeause we do not have node-modules folder where all packages live in when installed locally) so i need to install all packages used in the project 
-remember that all the  dependencies/packages that we have to installed  is saved in package.json file in dependencies object  
-so to install all packages/dependencies in package.json just do npm install
*/
